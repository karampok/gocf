// Code generated by go-bindata.
// sources:
// migrations_data/2_create_available_port_ranges_down.sql
// migrations_data/2_create_available_port_ranges_up.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations_data2_create_available_port_ranges_downSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2c\x4b\xcc\xcc\x49\x4c\xca\x49\x8d\x2f\xc8\x2f\x2a\x89\x2f\x4a\xcc\x4b\x4f\x2d\x56\xb0\xe6\x02\x04\x00\x00\xff\xff\x35\x52\x63\xd7\x2d\x00\x00\x00")

func migrations_data2_create_available_port_ranges_downSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_data2_create_available_port_ranges_downSql,
		"migrations_data/2_create_available_port_ranges_down.sql",
	)
}

func migrations_data2_create_available_port_ranges_downSql() (*asset, error) {
	bytes, err := migrations_data2_create_available_port_ranges_downSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_data/2_create_available_port_ranges_down.sql", size: 45, mode: os.FileMode(420), modTime: time.Unix(1444037756, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrations_data2_create_available_port_ranges_upSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\x31\x8f\x82\x30\x18\x87\xf1\x9d\x4f\xf1\x1f\x21\xb9\xe9\x72\x4c\x17\x87\x82\xaf\xda\x08\xc5\x94\x62\x64\x22\x55\xd0\x34\xc1\x96\x14\xe2\xe7\x17\x19\x1c\x8c\xf3\xf3\xcb\x93\x4a\x62\x8a\xa0\x58\x92\x11\xf8\x06\xa2\x50\xa0\x13\x2f\x55\x09\xfd\xd0\xa6\xd7\xe7\xbe\x6b\x06\xe7\xa7\xc6\x6b\x7b\xeb\x46\x84\x01\x60\x5a\x70\xa1\x16\x2b\xaa\x2c\x03\xab\x54\xd1\x70\x31\xbf\x72\x12\xea\x67\x16\x6d\x37\x5e\xbc\x19\x26\xe3\x2c\x8e\x4c\xa6\x3b\x26\xc3\xdf\x38\x8e\x16\xff\x02\xcb\xf2\xea\xdd\xfd\x9d\xff\x3e\xeb\xe4\xbe\xb6\x83\xe4\x39\x93\x35\xf6\x54\x23\x34\x6d\x14\x05\x24\xb6\x5c\x10\x56\xe0\xd6\xba\x75\xf2\x1f\x3c\x03\x00\x00\xff\xff\x97\xf6\x5e\x8f\xd5\x00\x00\x00")

func migrations_data2_create_available_port_ranges_upSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations_data2_create_available_port_ranges_upSql,
		"migrations_data/2_create_available_port_ranges_up.sql",
	)
}

func migrations_data2_create_available_port_ranges_upSql() (*asset, error) {
	bytes, err := migrations_data2_create_available_port_ranges_upSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations_data/2_create_available_port_ranges_up.sql", size: 213, mode: os.FileMode(420), modTime: time.Unix(1444037756, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations_data/2_create_available_port_ranges_down.sql": migrations_data2_create_available_port_ranges_downSql,
	"migrations_data/2_create_available_port_ranges_up.sql": migrations_data2_create_available_port_ranges_upSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations_data": &bintree{nil, map[string]*bintree{
		"2_create_available_port_ranges_down.sql": &bintree{migrations_data2_create_available_port_ranges_downSql, map[string]*bintree{
		}},
		"2_create_available_port_ranges_up.sql": &bintree{migrations_data2_create_available_port_ranges_upSql, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

